name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
      fail-fast: false  # 允许其他版本继续运行，即使某个版本失败
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: |
        npm ci --only=production
        echo "Dependencies installed successfully"
    
    - name: 🧪 Run tests
      run: |
        echo "Running tests for Node.js ${{ matrix.node-version }}"
        npm run test
        echo "Tests completed for Node.js ${{ matrix.node-version }}"
    
    - name: 🔍 Run linting
      run: |
        echo "Running linting for Node.js ${{ matrix.node-version }}"
        npm run lint
        echo "Linting completed for Node.js ${{ matrix.node-version }}"
      continue-on-error: true  # 允许linting失败而不影响整个流程
    
    - name: 📋 Run demo
      run: |
        echo "Running demo for Node.js ${{ matrix.node-version }}"
        npm run demo
        echo "Demo completed for Node.js ${{ matrix.node-version }}"
      continue-on-error: true
    
  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: |
        npm ci --only=production
        echo "Dependencies installed successfully"
    
    - name: 🏗️ Build project
      run: |
        echo "Building project..."
        npm run build
        echo "Build completed successfully"
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          src/
          config/
          examples/
          tests/
          docs/
          package.json
          README.md
          LICENSE
        retention-days: 30
      if: success()

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Check if docs directory exists
      run: |
        if [ -d "./docs" ]; then
          echo "✅ Docs directory found"
          ls -la ./docs/
        else
          echo "❌ Docs directory not found, creating with index.html"
          mkdir -p ./docs
          cat > ./docs/index.html << 'HTML_EOF'
        <!DOCTYPE html>
        <html lang="zh-CN">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>🎭 智能项目编排系统</title>
            <meta http-equiv="refresh" content="0; url=https://github.com/huang-jianhua/intelligent-project-orchestrator">
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    text-align: center;
                    padding: 50px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    min-height: 90vh;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                }
                .container {
                    max-width: 600px;
                    margin: 0 auto;
                    background: rgba(255,255,255,0.1);
                    padding: 40px;
                    border-radius: 20px;
                    backdrop-filter: blur(10px);
                }
                h1 { font-size: 2.5rem; margin-bottom: 1rem; }
                p { font-size: 1.2rem; margin-bottom: 2rem; }
                .btn {
                    display: inline-block;
                    padding: 15px 30px;
                    background: #ff6b6b;
                    color: white;
                    text-decoration: none;
                    border-radius: 50px;
                    font-weight: bold;
                    transition: transform 0.3s;
                }
                .btn:hover { transform: translateY(-2px); }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🎭 智能项目编排系统</h1>
                <p>基于AI角色切换的自动化项目管理工具</p>
                <p>正在重定向到项目主页...</p>
                <a href="https://github.com/huang-jianhua/intelligent-project-orchestrator" class="btn">
                    🚀 访问项目
                </a>
            </div>
        </body>
        </html>
        HTML_EOF
          echo "✅ Created fallback index.html"
        fi
        
    - name: 📋 Setup Pages
      uses: actions/configure-pages@v4
      continue-on-error: true
      
    - name: 📦 Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs
      continue-on-error: true
        
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      continue-on-error: true
      
    - name: 📊 Deployment result
      run: |
        if [ "${{ steps.deployment.outcome }}" = "success" ]; then
          echo "✅ GitHub Pages deployed successfully!"
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
        else
          echo "❌ GitHub Pages deployment failed"
          echo "💡 Please manually enable GitHub Pages in repository settings:"
          echo "   1. Go to https://github.com/huang-jianhua/intelligent-project-orchestrator/settings/pages"
          echo "   2. Set Source to 'GitHub Actions'"
          echo "   3. Click Save"
          echo ""
          echo "🔄 After enabling Pages, re-run this workflow"
        fi
